//
//MIT License
//
//Copyright (c) 2023 Daniel Abraham
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

// Code generated by protoc-gen-temporal-go. DO NOT EDIT.
// versions:
// - protoc-gen-temporal-go v0.0.0
// - protoc                 v4.23.2
// source: workflow_with_empty_options.proto

package workflows

import (
	context "context"
	client "go.temporal.io/sdk/client"
	worker "go.temporal.io/sdk/worker"
	workflow "go.temporal.io/sdk/workflow"
	log "log"
)

func StartWorkerWorkflowWithEmptyOptions(c client.Client) {
	taskQueue := "my-task-queue"
	opts := worker.Options{}
	w := worker.New(c, taskQueue, opts)

	w.RegisterWorkflow(Foo)

	if err := w.Run(worker.InterruptCh()); err != nil {
		log.Fatalln("Failed to start Temporal worker:", err)
	}
}

type WorkflowWithEmptyOptionsTemporalClient interface {
	// Foo workflow.
	Foo(ctx workflow.Context, in *FooInput) (*FooOutput, error)
}

type workflowWithEmptyOptionsTemporalClient struct {
	t client.Client
}

func NewWorkflowWithEmptyOptionsTemporalClient(c client.Client) *WorkflowWithEmptyOptionsTemporalClient {
	return &workflowWithEmptyOptionsTemporalClient{c}
}

// Foo workflow.
//
// This method starts the workflow with pre-configured options, and returns a
// WorkflowRun to interact with it until completion. For more information, see
// https://docs.temporal.io/dev-guide/go/foundations#start-workflow-execution.
func (c *workflowWithEmptyOptionsTemporalClient) StartWorkflowWorkflowWithEmptyOptionsFoo(ctx context.Context, in *FooInput) (client.WorkflowRun, error) {
	opts := client.StartWorkflowOptions{}
	return c.t.ExecuteWorkflow(ctx, opts, c.Foo, in)
}

// Foo workflow.
//
// This method executes the workflow with pre-configured options, blocks until
// completion, and returns the output/error results. For more information, see
// https://docs.temporal.io/dev-guide/go/foundations#start-workflow-execution.
func (c *workflowWithEmptyOptionsTemporalClient) ExecuteWorkflowWorkflowWithEmptyOptionsFoo(ctx context.Context, in *FooInput) (*FooOutput, error) {
	opts := client.StartWorkflowOptions{}
	run, err := c.t.ExecuteWorkflow(ctx, opts, c.Foo, in)
	if err != nil {
		return nil, err
	}
	var out *FooOutput
	err = run.Get(ctx, &out)
	return out, err
}

// Foo workflow.
//
// This method starts the workflow (as a child) with pre-configured options,
// and returns a Future to interact with it until completion. For more info,
// see https://docs.temporal.io/dev-guide/go/foundations#start-workflow-execution
// and https://docs.temporal.io/workflows#child-workflow.
func (c *workflowWithEmptyOptionsTemporalClient) StartChildWorkflowWorkflowWithEmptyOptionsFoo(ctx workflow.Context, in *FooInput) workflow.ChildWorkflowFuture {
	ctx = workflow.WithChildOptions(ctx, workflow.ChildWorkflowOptions{})
	return workflow.ExecuteChildWorkflow(ctx, c.Foo, in)
}

// Foo workflow.
//
// This method executes the workflow (as a child) with pre-configured options,
// blocks until completion, and returns the output/error. For more information,
// see https://docs.temporal.io/dev-guide/go/foundations#start-workflow-execution
// and https://docs.temporal.io/workflows#child-workflow.
func (c *workflowWithEmptyOptionsTemporalClient) ExecuteChildWorkflowWorkflowWithEmptyOptionsFoo(ctx workflow.Context, in *FooInput) (*FooOutput, error) {
	ctx = workflow.WithChildOptions(ctx, workflow.ChildWorkflowOptions{})
	var out *FooOutput
	err := workflow.ExecuteChildWorkflow(ctx, c.Foo, in).Get(ctx, &out)
	return out, err
}
