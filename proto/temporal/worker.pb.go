//
//MIT License
//
//Copyright (c) 2023 Daniel Abraham
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: worker.proto

package temporal

import (
	v11 "go.temporal.io/api/common/v1"
	v1 "go.temporal.io/api/enums/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WorkerOptions represents https://pkg.go.dev/go.temporal.io/sdk/worker#Options.
// See also https://legacy-documentation-sdks.temporal.io/go/how-to-set-workeroptions-in-go.
// TODO: Field comments.
type WorkerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sets the maximum concurrent Activity Executions for the Worker.
	//
	// Optional: default = 0 = 1,000.
	MaxConcurrentActivityExecutionSize int32 `protobuf:"varint,1,opt,name=max_concurrent_activity_execution_size,json=maxConcurrentActivityExecutionSize,proto3" json:"max_concurrent_activity_execution_size,omitempty"`
	// Rate limits the number of Activity Task Executions started per second
	// for the Worker. The intended use case is to limit resources used by the
	// Worker. Notice that the value type is a float so that the value can be
	// less than 1 if needed. For example, if set to 0.1, Activity Task
	// Executions will happen once every 10 seconds. This can be used to
	// protect downstream services from flooding with requests.
	//
	// See https://docs.temporal.io/tasks#activity-task-execution.
	// Optional: default = 0 = 100,000.
	WorkerActivitiesPerSecond float64 `protobuf:"fixed64,2,opt,name=worker_activities_per_second,json=workerActivitiesPerSecond,proto3" json:"worker_activities_per_second,omitempty"`
	// Set the maximum concurrent Local Activity Executions for the Worker.
	//
	// See https://docs.temporal.io/activities#local-activity.
	// Optional: default = 0 = 1,000.
	MaxConcurrentLocalActivityExecutionSize int32 `protobuf:"varint,3,opt,name=max_concurrent_local_activity_execution_size,json=maxConcurrentLocalActivityExecutionSize,proto3" json:"max_concurrent_local_activity_execution_size,omitempty"`
	// Rate limits the number of Local Activity Executions per second executed
	// for the Worker. The intended use case is to limit resources used by the
	// Worker. Notice that the value type is a float so that the value can be
	// less than 1 if needed. For example, if set to 0.1, Local Activity Task
	// Executions will happen once every 10 seconds. This can be used to
	// protect downstream services from flooding with requests.
	//
	// See https://docs.temporal.io/tasks#activity-task-execution.
	// Optional: default = 0 = 100,000.
	WorkerLocalActivitiesPerSecond float64 `protobuf:"fixed64,4,opt,name=worker_local_activities_per_second,json=workerLocalActivitiesPerSecond,proto3" json:"worker_local_activities_per_second,omitempty"`
	// Rate limits the number of Activity Executions that can be started per
	// second. This rate is managed by the server and limits the Activity Tasks
	// per second for the entire Task Queue, whereas [WorkerActivitiesPerSecond]
	// controls activities only per worker. Notice that the value type is a
	// float so that the value can be less than 1 if needed. For example, if
	// set to 0.1, Activity Task Executions will happen once every 10 seconds.
	// This can be used to protect downstream services from flooding with
	// requests.
	//
	// See https://docs.temporal.io/tasks#activity-task-execution.
	// Optional: default = 0 = 100,000.
	TaskQueueActivitiesPerSecond float64 `protobuf:"fixed64,5,opt,name=task_queue_activities_per_second,json=taskQueueActivitiesPerSecond,proto3" json:"task_queue_activities_per_second,omitempty"`
	// Sets the maximum number of goroutines to concurrently poll the Task
	// Queue for Activity Tasks. Changing this value will affect the rate at
	// which the Worker is able to consume Activity Tasks from the Task Queue.
	//
	// Optional: default = 2.
	MaxConcurrentActivityTaskPollers int32 `protobuf:"varint,6,opt,name=max_concurrent_activity_task_pollers,json=maxConcurrentActivityTaskPollers,proto3" json:"max_concurrent_activity_task_pollers,omitempty"`
	// Sets the maximum number of concurrent Workflow Task Executions the
	// Worker can have. Due to internal logic where pollers alternate between
	// sticky and non-sticky queues, the Worker will panic if this value is set
	// to 1.
	//
	// Optional: default = 0 = 1,000.
	MaxConcurrentWorkflowTaskExecutionSize int32 `protobuf:"varint,7,opt,name=max_concurrent_workflow_task_execution_size,json=maxConcurrentWorkflowTaskExecutionSize,proto3" json:"max_concurrent_workflow_task_execution_size,omitempty"`
	// Sets the maximum number of goroutines that will concurrently poll the
	// Task Queue for Workflow Tasks. Changing this value will affect the rate
	// at which the Worker is able to consume Workflow Tasks from the Task
	// Queue. Due to internal logic where pollers alternate between sticky and
	// non-sticky queues, the Worker will panic if this value is set to 1.
	//
	// Optional: default = 2.
	MaxConcurrentWorkflowTaskPollers int32 `protobuf:"varint,8,opt,name=max_concurrent_workflow_task_pollers,json=maxConcurrentWorkflowTaskPollers,proto3" json:"max_concurrent_workflow_task_pollers,omitempty"`
	// Enable logging in Workflow Execution replays. In Workflow Definitions
	// you can use `workflow.GetLogger(ctx)` to write logs. By default, the
	// logger will skip logging during replays, so you do not see duplicate
	// logs. This is only really useful for debugging purpose.
	//
	// Optional: default = false.
	EnableLoggingInReplay bool `protobuf:"varint,9,opt,name=enable_logging_in_replay,json=enableLoggingInReplay,proto3" json:"enable_logging_in_replay,omitempty"`
	// Sticky Execution runs Workflow Tasks of a Workflow Execution on the same
	// host (could be a different Worker, as long as it is on the same host).
	// This is an optimization for Workflow Executions. When sticky execution
	// is enabled, Worker keeps the Workflow state in memory. A new Workflow
	// Task containing the new history events will be dispatched to the same
	// Worker. If this Worker crashes, the sticky Workflow Task will time-out
	// after [StickyScheduleToStartTimeout], and Temporal Cluster will clear
	// the stickiness for that Workflow Execution and automatically reschedule
	// a new Workflow Task that is available for any Worker to pick up and
	// resume the progress.
	//
	// Optional: default = false.
	//
	// Deprecated: DisableStickyExecution harms performance. It will be removed
	// soon. See `worker.SetStickyWorkflowCacheSize()` instead.
	//
	// Deprecated: Marked as deprecated in worker.proto.
	DisableStickyExecution bool `protobuf:"varint,10,opt,name=disable_sticky_execution,json=disableStickyExecution,proto3" json:"disable_sticky_execution,omitempty"`
	// The Sticky Execution Schedule-To-Start Timeout for Workflow Tasks. See
	// details about sticky execution in [DisableStickyExecution].
	//
	// Optional: default = 5 seconds.
	StickyScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,11,opt,name=sticky_schedule_to_start_timeout,json=stickyScheduleToStartTimeout,proto3" json:"sticky_schedule_to_start_timeout,omitempty"`
	// The Worker's graceful stop timeout.
	//
	// Optional: default = 0 seconds.
	WorkerStopTimeout                       *durationpb.Duration `protobuf:"bytes,14,opt,name=worker_stop_timeout,json=workerStopTimeout,proto3" json:"worker_stop_timeout,omitempty"`
	EnableSessionWorker                     bool                 `protobuf:"varint,15,opt,name=enable_session_worker,json=enableSessionWorker,proto3" json:"enable_session_worker,omitempty"`
	DisableWorkflowWorker                   bool                 `protobuf:"varint,16,opt,name=disable_workflow_worker,json=disableWorkflowWorker,proto3" json:"disable_workflow_worker,omitempty"`
	LocalActivityWorkerOnly                 bool                 `protobuf:"varint,17,opt,name=local_activity_worker_only,json=localActivityWorkerOnly,proto3" json:"local_activity_worker_only,omitempty"`
	Identity                                string               `protobuf:"bytes,18,opt,name=identity,proto3" json:"identity,omitempty"`
	DeadlockDetectionTimeout                *durationpb.Duration `protobuf:"bytes,19,opt,name=deadlock_detection_timeout,json=deadlockDetectionTimeout,proto3" json:"deadlock_detection_timeout,omitempty"`
	MaxHeartbeatThrottleInterval            *durationpb.Duration `protobuf:"bytes,20,opt,name=max_heartbeat_throttle_interval,json=maxHeartbeatThrottleInterval,proto3" json:"max_heartbeat_throttle_interval,omitempty"`
	DefaultHeartbeatThrottleInterval        *durationpb.Duration `protobuf:"bytes,21,opt,name=default_heartbeat_throttle_interval,json=defaultHeartbeatThrottleInterval,proto3" json:"default_heartbeat_throttle_interval,omitempty"`
	DisableEagerActivities                  bool                 `protobuf:"varint,24,opt,name=disable_eager_activities,json=disableEagerActivities,proto3" json:"disable_eager_activities,omitempty"`
	MaxConcurrentEagerActivityExecutionSize int32                `protobuf:"varint,25,opt,name=max_concurrent_eager_activity_execution_size,json=maxConcurrentEagerActivityExecutionSize,proto3" json:"max_concurrent_eager_activity_execution_size,omitempty"`
	DisableRegistrationAliasing             bool                 `protobuf:"varint,26,opt,name=disable_registration_aliasing,json=disableRegistrationAliasing,proto3" json:"disable_registration_aliasing,omitempty"`
	BuildId                                 string               `protobuf:"bytes,27,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	UseBuildIdForVersioning                 bool                 `protobuf:"varint,28,opt,name=use_build_id_for_versioning,json=useBuildIdForVersioning,proto3" json:"use_build_id_for_versioning,omitempty"`
}

func (x *WorkerOptions) Reset() {
	*x = WorkerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerOptions) ProtoMessage() {}

func (x *WorkerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerOptions.ProtoReflect.Descriptor instead.
func (*WorkerOptions) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerOptions) GetMaxConcurrentActivityExecutionSize() int32 {
	if x != nil {
		return x.MaxConcurrentActivityExecutionSize
	}
	return 0
}

func (x *WorkerOptions) GetWorkerActivitiesPerSecond() float64 {
	if x != nil {
		return x.WorkerActivitiesPerSecond
	}
	return 0
}

func (x *WorkerOptions) GetMaxConcurrentLocalActivityExecutionSize() int32 {
	if x != nil {
		return x.MaxConcurrentLocalActivityExecutionSize
	}
	return 0
}

func (x *WorkerOptions) GetWorkerLocalActivitiesPerSecond() float64 {
	if x != nil {
		return x.WorkerLocalActivitiesPerSecond
	}
	return 0
}

func (x *WorkerOptions) GetTaskQueueActivitiesPerSecond() float64 {
	if x != nil {
		return x.TaskQueueActivitiesPerSecond
	}
	return 0
}

func (x *WorkerOptions) GetMaxConcurrentActivityTaskPollers() int32 {
	if x != nil {
		return x.MaxConcurrentActivityTaskPollers
	}
	return 0
}

func (x *WorkerOptions) GetMaxConcurrentWorkflowTaskExecutionSize() int32 {
	if x != nil {
		return x.MaxConcurrentWorkflowTaskExecutionSize
	}
	return 0
}

func (x *WorkerOptions) GetMaxConcurrentWorkflowTaskPollers() int32 {
	if x != nil {
		return x.MaxConcurrentWorkflowTaskPollers
	}
	return 0
}

func (x *WorkerOptions) GetEnableLoggingInReplay() bool {
	if x != nil {
		return x.EnableLoggingInReplay
	}
	return false
}

// Deprecated: Marked as deprecated in worker.proto.
func (x *WorkerOptions) GetDisableStickyExecution() bool {
	if x != nil {
		return x.DisableStickyExecution
	}
	return false
}

func (x *WorkerOptions) GetStickyScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.StickyScheduleToStartTimeout
	}
	return nil
}

func (x *WorkerOptions) GetWorkerStopTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkerStopTimeout
	}
	return nil
}

func (x *WorkerOptions) GetEnableSessionWorker() bool {
	if x != nil {
		return x.EnableSessionWorker
	}
	return false
}

func (x *WorkerOptions) GetDisableWorkflowWorker() bool {
	if x != nil {
		return x.DisableWorkflowWorker
	}
	return false
}

func (x *WorkerOptions) GetLocalActivityWorkerOnly() bool {
	if x != nil {
		return x.LocalActivityWorkerOnly
	}
	return false
}

func (x *WorkerOptions) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *WorkerOptions) GetDeadlockDetectionTimeout() *durationpb.Duration {
	if x != nil {
		return x.DeadlockDetectionTimeout
	}
	return nil
}

func (x *WorkerOptions) GetMaxHeartbeatThrottleInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxHeartbeatThrottleInterval
	}
	return nil
}

func (x *WorkerOptions) GetDefaultHeartbeatThrottleInterval() *durationpb.Duration {
	if x != nil {
		return x.DefaultHeartbeatThrottleInterval
	}
	return nil
}

func (x *WorkerOptions) GetDisableEagerActivities() bool {
	if x != nil {
		return x.DisableEagerActivities
	}
	return false
}

func (x *WorkerOptions) GetMaxConcurrentEagerActivityExecutionSize() int32 {
	if x != nil {
		return x.MaxConcurrentEagerActivityExecutionSize
	}
	return 0
}

func (x *WorkerOptions) GetDisableRegistrationAliasing() bool {
	if x != nil {
		return x.DisableRegistrationAliasing
	}
	return false
}

func (x *WorkerOptions) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *WorkerOptions) GetUseBuildIdForVersioning() bool {
	if x != nil {
		return x.UseBuildIdForVersioning
	}
	return false
}

// StartWorkflowOptions represents https://pkg.go.dev/go.temporal.io/sdk/client#StartWorkflowOptions.
// See also https://docs.temporal.io/dev-guide/go/foundations#start-workflow-execution.
type StartWorkflowOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The business identifier of the workflow execution.
	//
	// See https://docs.temporal.io/workflows#workflow-id.
	// Optional: default = system generated UUID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Workflow tasks are scheduled on the queue with this name. This is also
	// the name of the activity task queue on which activities are scheduled.
	// The workflow author can choose to override this using activity options.
	//
	// See https://docs.temporal.io/tasks#task-queue.
	// Required: no default.
	TaskQueue string `protobuf:"bytes,2,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// The maximum and total amount of time that a Workflow Execution can
	// be executing, including retries and any usage of Continue-As-New.
	//
	// See https://docs.temporal.io/workflows#workflow-execution-timeout.
	// See also https://docs.temporal.io/workflows#workflow-execution-chain.
	// Optional: default = unlimited.
	WorkflowExecutionTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=workflow_execution_timeout,json=workflowExecutionTimeout,proto3" json:"workflow_execution_timeout,omitempty"`
	// The maximum amount of time that a single Workflow Run is restricted to.
	// If this timeout is reached, the Workflow Execution is terminated.
	//
	// See https://docs.temporal.io/workflows#workflow-run-timeout.
	// Optional: default = [WorkflowExecutionTimeout].
	WorkflowRunTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=workflow_run_timeout,json=workflowRunTimeout,proto3" json:"workflow_run_timeout,omitempty"`
	// The maximum amount of time allowed for a Worker to execute a Workflow
	// Task after the Worker has pulled that Workflow Task from the Task Queue.
	// This timeout is primarily available to recognize whether a Worker has
	// gone down so that the Workflow Execution can be recovered on a different
	// Worker. The main reason for increasing the default value would be to
	// accommodate a Workflow Execution that has a very long Workflow Execution
	// History that could take longer than 10 seconds for the Worker to load.
	//
	// See https://docs.temporal.io/workflows#workflow-task-timeout.
	// Optional: default = 10 secsonds.
	WorkflowTaskTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=workflow_task_timeout,json=workflowTaskTimeout,proto3" json:"workflow_task_timeout,omitempty"`
	// Whether the server should allow reuse of the workflow ID. Can be useful
	// for dedupe logic if set to `WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE`.
	//
	// Optional: default = `WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE`.
	WorkflowIdReusePolicy v1.WorkflowIdReusePolicy `protobuf:"varint,6,opt,name=workflow_id_reuse_policy,json=workflowIdReusePolicy,proto3,enum=temporal.api.enums.v1.WorkflowIdReusePolicy" json:"workflow_id_reuse_policy,omitempty"`
	// When true, `Client.ExecuteWorkflow` will return an error if the workflow
	// ID has already been used and [WorkflowIdReusePolicy] disallows re-runs.
	// When false, rather than erroring, a `WorkflowRun` instance representing
	// the current or last run will be returned.
	//
	// Optional: default = false.
	WorkflowExecutionErrorWhenAlreadyStarted bool `protobuf:"varint,7,opt,name=workflow_execution_error_when_already_started,json=workflowExecutionErrorWhenAlreadyStarted,proto3" json:"workflow_execution_error_when_already_started,omitempty"`
	// Typically used in activities rather than workflows, but if a retry
	// policy is specified the server will start a new workflow execution in
	// case of a workflow failure. Either way retries will never exceed
	// [WorkflowExecutionTimeout].
	//
	// See https://docs.temporal.io/retry-policies.
	// Optional: default = none (no retries for workflows).
	RetryPolicy *v11.RetryPolicy `protobuf:"bytes,8,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// If a cron schedule is specified, the workflow will run as a cron based
	// on the schedule - See https://docs.temporal.io/workflows#temporal-cron-job
	// for details.
	//
	// There are two supported specification formats: "classic" and "robfig" -
	// see details in https://docs.temporal.io/workflows#temporal-cron-job.
	// Cron Schedules are interpreted in UTC time by default, unless prefixed
	// with `CRON_TZ` - see https://docs.temporal.io/workflows#time-zones for
	// details and caveats.
	//
	// The Temporal Server starts the next Run only after the current Run has
	// completed, failed, or reached the [WorkflowRunTimeout]. If [RetryPolicy]
	// is also provided, and a Run fails or times-out, the Run will be retried
	// until it completes or the retry policy has been exhausted. If the next
	// Run, per the cron schedule, is due while the current Run is still Open
	// (including retries), the Server will skip it.
	//
	// A cron workflow will not stop until it is terminated or canceled (by
	// returning `temporal.CanceledError`).
	CronSchedule string `protobuf:"bytes,9,opt,name=cron_schedule,json=cronSchedule,proto3" json:"cron_schedule,omitempty"`
}

func (x *StartWorkflowOptions) Reset() {
	*x = StartWorkflowOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartWorkflowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartWorkflowOptions) ProtoMessage() {}

func (x *StartWorkflowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartWorkflowOptions.ProtoReflect.Descriptor instead.
func (*StartWorkflowOptions) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{1}
}

func (x *StartWorkflowOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StartWorkflowOptions) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *StartWorkflowOptions) GetWorkflowExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowExecutionTimeout
	}
	return nil
}

func (x *StartWorkflowOptions) GetWorkflowRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowRunTimeout
	}
	return nil
}

func (x *StartWorkflowOptions) GetWorkflowTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.WorkflowTaskTimeout
	}
	return nil
}

func (x *StartWorkflowOptions) GetWorkflowIdReusePolicy() v1.WorkflowIdReusePolicy {
	if x != nil {
		return x.WorkflowIdReusePolicy
	}
	return v1.WorkflowIdReusePolicy(0)
}

func (x *StartWorkflowOptions) GetWorkflowExecutionErrorWhenAlreadyStarted() bool {
	if x != nil {
		return x.WorkflowExecutionErrorWhenAlreadyStarted
	}
	return false
}

func (x *StartWorkflowOptions) GetRetryPolicy() *v11.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *StartWorkflowOptions) GetCronSchedule() string {
	if x != nil {
		return x.CronSchedule
	}
	return ""
}

// ActivityOptions represents https://pkg.go.dev/go.temporal.io/sdk/workflow#ActivityOptions.
// See also https://docs.temporal.io/activities#activity-execution.
type ActivityOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task queue that the activity needs to be scheduled on.
	//
	// See https://docs.temporal.io/tasks#task-queue.
	// Optional: default = the workflow's task queue.
	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// The maximum amount of time allowed for the overall Activity Execution,
	// from when the first Activity Task is scheduled to when the last Activity
	// Task, in the chain of Activity Tasks that make up the Activity Execution
	// (including retries), reaches a Closed status.
	//
	// An Activity Execution must have either this timeout (Schedule-To-Close)
	// or [StartToCloseTimeout] set. By default, an Activity Execution Retry
	// Policy dictates that retries will occur for up to 10 years. This timeout
	// can be used to control the overall duration of an Activity Execution in
	// the face of failures (repeated Activity Task Executions), without
	// altering the Maximum Attempts field of the Retry Policy.
	//
	// See https://docs.temporal.io/activities#schedule-to-close-timeout.
	// Optional: default = unlimited.
	ScheduleToCloseTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	// The maximum amount of time that is allowed from when an Activity Task
	// is scheduled (that is, placed in a Task Queue) to when a Worker starts
	// (that is, picks up from the Task Queue) that Activity Task. In other
	// words, it's a limit for how long an Activity Task can be enqueued.
	//
	// If this timeout is used, we recommend setting this timeout to the
	// maximum time a Workflow Execution is willing to wait for an Activity
	// Execution in the presence of all possible Worker outages, and have a
	// concrete plan in place to reroute Activity Tasks to a different Task
	// Queue. This timeout does not trigger any retries regardless of the Retry
	// Policy, as a retry would place the Activity Task back into the same Task
	// Queue. We do not recommend using this timeout unless you know what you
	// are doing.
	//
	// See https://docs.temporal.io/activities#schedule-to-start-timeout.
	// Optional: default = unlimited.
	ScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	// The maximum time allowed for a single Activity Task Execution.
	//
	// An Activity Execution must have either this timeout (Start-To-Close)
	// or the Schedule-To-Close Timeout set. We recommend always setting this
	// timeout; however, make sure that it is always set to be longer than the
	// maximum possible time for the Activity Execution to take place. For long
	// running Activity Executions, we recommend also using Activity Heartbeats
	// (`Activity.RecordHeartbeat`) and Heartbeat Timeouts.
	//
	// The main use case for the Start-To-Close timeout is to detect when a
	// Worker crashes after it has started executing an Activity Task.
	//
	// A Retry Policy attached to an Activity Execution retries an Activity
	// Task Execution. Thus, the Start-To-Close Timeout is applied to each
	// Activity Task Execution within an Activity Execution.
	//
	// See https://docs.temporal.io/activities#start-to-close-timeout.
	// Optional: default = [ScheduleToCloseTimeout].
	StartToCloseTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	// The maximum time allowed after the Activity starts, and between Activity
	// Heartbeats (calls to `Activity.RecordHeartbeat`). If this timeout is
	// reached, the Activity Task fails and a retry occurs if a Retry Policy
	// dictates it.
	//
	// See https://docs.temporal.io/activities#activity-heartbeat and
	// https://docs.temporal.io/activities#heartbeat-timeout.
	// Optional: default = unlimited.
	HeartbeatTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	// TODO: Field comment.
	// See https://docs.temporal.io/activities#cancellation.
	// Optional: default = false.
	WaitForCancellation bool `protobuf:"varint,6,opt,name=wait_for_cancellation,json=waitForCancellation,proto3" json:"wait_for_cancellation,omitempty"`
	// TODO: Field comment.
	// See https://docs.temporal.io/activities#activity-id.
	// Optional: default = empty string.
	ActivityId string `protobuf:"bytes,7,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	// To disable retries set Maximum Attempts to 1.
	// See https://docs.temporal.io/retry-policies for details.
	// Optional: default =
	//
	//	Initial Interval     = 1 second
	//	Backoff Coefficient  = 2.0
	//	Maximum Interval     = 100 × Initial Interval
	//	Maximum Attempts     = 0 (unlimited)
	//	Non-Retryable Errors = none
	RetryPolicy *v11.RetryPolicy `protobuf:"bytes,8,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// If true, will not request eager execution regardless of worker settings.
	// If false, eager execution may still be disabled at the worker level or
	// eager execution may not be requested due to lack of available slots.
	//
	// Eager activity execution means the server returns requested eager
	// activities directly from the workflow task back to this worker which is
	// faster than non-eager which may be dispatched to a separate worker.
	DisableEagerExecution bool `protobuf:"varint,9,opt,name=disable_eager_execution,json=disableEagerExecution,proto3" json:"disable_eager_execution,omitempty"`
}

func (x *ActivityOptions) Reset() {
	*x = ActivityOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOptions) ProtoMessage() {}

func (x *ActivityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOptions.ProtoReflect.Descriptor instead.
func (*ActivityOptions) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{2}
}

func (x *ActivityOptions) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ActivityOptions) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *ActivityOptions) GetScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *ActivityOptions) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *ActivityOptions) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *ActivityOptions) GetWaitForCancellation() bool {
	if x != nil {
		return x.WaitForCancellation
	}
	return false
}

func (x *ActivityOptions) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ActivityOptions) GetRetryPolicy() *v11.RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *ActivityOptions) GetDisableEagerExecution() bool {
	if x != nil {
		return x.DisableEagerExecution
	}
	return false
}

type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskQueue string         `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	Options   *WorkerOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{3}
}

func (x *Worker) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *Worker) GetOptions() *WorkerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *StartWorkflowOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{4}
}

func (x *Workflow) GetOptions() *StartWorkflowOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options *ActivityOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_worker_proto_rawDescGZIP(), []int{5}
}

func (x *Activity) GetOptions() *ActivityOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

var file_worker_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*Worker)(nil),
		Field:         7233,
		Name:          "temporal.worker",
		Tag:           "bytes,7233,opt,name=worker",
		Filename:      "worker.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Workflow)(nil),
		Field:         7234,
		Name:          "temporal.workflow",
		Tag:           "bytes,7234,opt,name=workflow",
		Filename:      "worker.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*Activity)(nil),
		Field:         7235,
		Name:          "temporal.activity",
		Tag:           "bytes,7235,opt,name=activity",
		Filename:      "worker.proto",
	},
}

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional temporal.Worker worker = 7233;
	E_Worker = &file_worker_proto_extTypes[0]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional temporal.Workflow workflow = 7234;
	E_Workflow = &file_worker_proto_extTypes[1]
	// optional temporal.Activity activity = 7235;
	E_Activity = &file_worker_proto_extTypes[2]
)

var File_worker_proto protoreflect.FileDescriptor

var file_worker_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x0d, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x26, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x1c,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x5d, 0x0a,
	0x2c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x27, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4a, 0x0a, 0x22,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1c, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x4e, 0x0a, 0x24, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20,
	0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x5b, 0x0a, 0x2b, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a,
	0x24, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x20, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x16, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x20, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x73, 0x74, 0x69, 0x63, 0x6b,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x1a, 0x64, 0x65, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x60, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x68, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x20, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x18,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x61, 0x67, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x2c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x27, 0x6d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x61, 0x67, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73, 0x65, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x22, 0xef, 0x04, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x1a, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x4d, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x65, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x15, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5f, 0x0a, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x68, 0x65, 0x6e, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x22, 0xc9, 0x04, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x54, 0x0a,
	0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x77, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x61, 0x67, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x5a, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a, 0x08,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x3f, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x33,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x4a, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc1,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x3a,
	0x4f, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc2, 0x38, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x3a, 0x4f, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc3, 0x38, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x61, 0x61, 0x62, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_worker_proto_rawDescOnce sync.Once
	file_worker_proto_rawDescData = file_worker_proto_rawDesc
)

func file_worker_proto_rawDescGZIP() []byte {
	file_worker_proto_rawDescOnce.Do(func() {
		file_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_worker_proto_rawDescData)
	})
	return file_worker_proto_rawDescData
}

var file_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_worker_proto_goTypes = []interface{}{
	(*WorkerOptions)(nil),               // 0: temporal.WorkerOptions
	(*StartWorkflowOptions)(nil),        // 1: temporal.StartWorkflowOptions
	(*ActivityOptions)(nil),             // 2: temporal.ActivityOptions
	(*Worker)(nil),                      // 3: temporal.Worker
	(*Workflow)(nil),                    // 4: temporal.Workflow
	(*Activity)(nil),                    // 5: temporal.Activity
	(*durationpb.Duration)(nil),         // 6: google.protobuf.Duration
	(v1.WorkflowIdReusePolicy)(0),       // 7: temporal.api.enums.v1.WorkflowIdReusePolicy
	(*v11.RetryPolicy)(nil),             // 8: temporal.api.common.v1.RetryPolicy
	(*descriptorpb.ServiceOptions)(nil), // 9: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),  // 10: google.protobuf.MethodOptions
}
var file_worker_proto_depIdxs = []int32{
	6,  // 0: temporal.WorkerOptions.sticky_schedule_to_start_timeout:type_name -> google.protobuf.Duration
	6,  // 1: temporal.WorkerOptions.worker_stop_timeout:type_name -> google.protobuf.Duration
	6,  // 2: temporal.WorkerOptions.deadlock_detection_timeout:type_name -> google.protobuf.Duration
	6,  // 3: temporal.WorkerOptions.max_heartbeat_throttle_interval:type_name -> google.protobuf.Duration
	6,  // 4: temporal.WorkerOptions.default_heartbeat_throttle_interval:type_name -> google.protobuf.Duration
	6,  // 5: temporal.StartWorkflowOptions.workflow_execution_timeout:type_name -> google.protobuf.Duration
	6,  // 6: temporal.StartWorkflowOptions.workflow_run_timeout:type_name -> google.protobuf.Duration
	6,  // 7: temporal.StartWorkflowOptions.workflow_task_timeout:type_name -> google.protobuf.Duration
	7,  // 8: temporal.StartWorkflowOptions.workflow_id_reuse_policy:type_name -> temporal.api.enums.v1.WorkflowIdReusePolicy
	8,  // 9: temporal.StartWorkflowOptions.retry_policy:type_name -> temporal.api.common.v1.RetryPolicy
	6,  // 10: temporal.ActivityOptions.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	6,  // 11: temporal.ActivityOptions.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	6,  // 12: temporal.ActivityOptions.start_to_close_timeout:type_name -> google.protobuf.Duration
	6,  // 13: temporal.ActivityOptions.heartbeat_timeout:type_name -> google.protobuf.Duration
	8,  // 14: temporal.ActivityOptions.retry_policy:type_name -> temporal.api.common.v1.RetryPolicy
	0,  // 15: temporal.Worker.options:type_name -> temporal.WorkerOptions
	1,  // 16: temporal.Workflow.options:type_name -> temporal.StartWorkflowOptions
	2,  // 17: temporal.Activity.options:type_name -> temporal.ActivityOptions
	9,  // 18: temporal.worker:extendee -> google.protobuf.ServiceOptions
	10, // 19: temporal.workflow:extendee -> google.protobuf.MethodOptions
	10, // 20: temporal.activity:extendee -> google.protobuf.MethodOptions
	3,  // 21: temporal.worker:type_name -> temporal.Worker
	4,  // 22: temporal.workflow:type_name -> temporal.Workflow
	5,  // 23: temporal.activity:type_name -> temporal.Activity
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	21, // [21:24] is the sub-list for extension type_name
	18, // [18:21] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_worker_proto_init() }
func file_worker_proto_init() {
	if File_worker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartWorkflowOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_worker_proto_goTypes,
		DependencyIndexes: file_worker_proto_depIdxs,
		MessageInfos:      file_worker_proto_msgTypes,
		ExtensionInfos:    file_worker_proto_extTypes,
	}.Build()
	File_worker_proto = out.File
	file_worker_proto_rawDesc = nil
	file_worker_proto_goTypes = nil
	file_worker_proto_depIdxs = nil
}
